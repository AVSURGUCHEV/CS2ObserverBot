import os
import re
import json
import uuid
from datetime import datetime, timezone
from aiogram import types, Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
CHANNEL_ID = -1002559015377
VOTES_FILE = "votes.json"
REPORTS_FILE = "reports.json"


def load_votes():
    if not os.path.exists(VOTES_FILE):
        return {}
    with open(VOTES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_votes(votes):
    with open(VOTES_FILE, "w", encoding="utf-8") as f:
        json.dump(votes, f, indent=2, ensure_ascii=False)


vote_counts = load_votes()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
form_router = Router()
dp.include_router(form_router)


class FSMReport(StatesGroup):
    waiting_for_link = State()
    waiting_for_reason = State()
    waiting_for_comment = State()
    waiting_for_video = State()


class ReportForm(StatesGroup):
    profile_link = State()
    reason = State()
    comment = State()
    video = State()


reason_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üéØ Aim", callback_data="Aim")],
        [InlineKeyboardButton(text="üß± WallHack", callback_data="WallHack")],
        [InlineKeyboardButton(text="üéØ+üß± Aim+WH", callback_data="Aim+WH")],
        [InlineKeyboardButton(text="ü§î –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", callback_data="Other")],
    ]
)

main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", callback_data="report")],
        [InlineKeyboardButton(text="üìπ –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ?", callback_data="how_to_record")],
    ]
)

reply_main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç")],
        [KeyboardButton(text="üìπ –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ?")],
    ],
    resize_keyboard=True
)

channel_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üö® –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", url=f"https://t.me/{os.getenv('BOT_USERNAME')}")]
    ]
)


def load_reports():
    if not os.path.exists(REPORTS_FILE):
        return []
    with open(REPORTS_FILE, "r", encoding="utf-8") as f:
        reports = json.load(f)
        for r in reports:
            if "uuid" in r.get("data", {}):
                del r["data"]["uuid"]
            if "timestamp" in r.get("data", {}):
                del r["data"]["timestamp"]
        return reports


def save_report(report):
    reports = load_reports()
    reports.append(report)
    with open(REPORTS_FILE, "w", encoding="utf-8") as f:
        json.dump(reports, f, indent=2, ensure_ascii=False)


async def is_admin(message: Message) -> bool:
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return False
    return True


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CS2ObserverBot!\n\n"
        "üì© –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, "
        "–∏–ª–∏ —É–∑–Ω–∞–π, –∫–∞–∫ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Steam:",
        reply_markup=reply_main_keyboard
    )

@dp.message(F.text.lower().in_(["–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç", "report", "—Ä–µ–ø–æ—Ä—Ç", "üì© –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "üìπ –∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ?"]))
async def alt_start(message: Message):
    text = message.text.lower()
    if "–≤–∏–¥–µ–æ" in text:
        await how_to_record(message)
    else:
        await start_report_fake(message)


async def start_report_fake(message: Message):
    callback_query = types.CallbackQuery(
        id="fake",
        from_user=message.from_user,
        message=message
    )
    await start_report(callback_query, state=dp.fsm.storage)


@dp.message(F.text.lower() == "–Ω–∞—á–∞—Ç—å")
async def alt_start(message: Message):
    await cmd_start(message)


@dp.callback_query(F.data == "how_to_record")
async def how_to_record(callback_query):
    if isinstance(callback_query, Message):
        message = callback_query
    else:
        message = callback_query.message

    await message.answer(
        "<b>–ö–∞–∫ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Steam:</b>\n\n"
        "1. –ó–∞–π–¥–∏ –≤ Steam ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –í –∏–≥—Ä–µ ‚Üí Game Recording\n"
        "2. –í–∫–ª—é—á–∏ –∑–∞–ø–∏—Å—å\n"
        "3. –ó–∞–ø—É—Å—Ç–∏ CS2 –∏ –Ω–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å. –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        "üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://store.steampowered.com/gamerecording",
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "report")
async def start_report(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    if user_data.get("in_progress"):
        await callback_query.message.answer(
            "‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç. –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_report")],
                    [InlineKeyboardButton(text="‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_report")],
                ]
            )
        )
        return

    await callback_query.message.answer("üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam:")
    await state.update_data(in_progress=True)
    await state.set_state(ReportForm.profile_link)


async def start_report_fake(message: Message):
    callback_query = types.CallbackQuery(
        id="fake",
        from_user=message.from_user,
        message=message
    )
    await start_report(callback_query, state=dp.fsm.storage)


@dp.callback_query(F.data == "continue_report")
async def continue_report(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "reason" not in user_data:
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è:", reply_markup=reason_keyboard)
        await state.set_state(ReportForm.reason)
    elif "comment" not in user_data:
        await callback_query.message.answer("üìù –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è–º:")
        await state.set_state(ReportForm.comment)
    elif "video" not in user_data:
        await callback_query.message.answer("üìπ –ü—Ä–∏–∫—Ä–µ–ø–∏ –≤–∏–¥–µ–æ (–¥–æ 50 –ú–ë, —Ç–æ–ª—å–∫–æ .mp4):")
        await state.set_state(ReportForm.video)
    else:
        await callback_query.message.answer("‚úÖ –†–µ–ø–æ—Ä—Ç —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.")
        await state.clear()


@dp.callback_query(F.data == "restart_report")
async def restart_report(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("üîÑ –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞.\nüîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam:")
    await state.update_data(in_progress=True)
    await state.set_state(ReportForm.profile_link)


@form_router.message(ReportForm.profile_link)
async def process_profile_link(message: Message, state: FSMContext):
    link = message.text.strip().replace('\u200b', '').replace('\xa0', '').replace(' ', '')
    if link.endswith("/"):
        link = link[:-1]

    pattern = r"^https://steamcommunity\\.com/profiles/(\d{17})$"
    match = re.match(pattern, link)
    if not match:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Steam, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`https://steamcommunity.com/profiles/76561198000000000`",
            parse_mode="Markdown"
        )
        return

    steam_id = match.group(1)
    profile_link = f"https://steamcommunity.com/profiles/{steam_id}"

    existing_reports = load_reports()
    for r in existing_reports:
        if r["profile_link"] == profile_link:
            msg_id = r.get("channel_msg_id")
            buttons = [[InlineKeyboardButton(text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="continue_report")]]
            if msg_id:
                buttons.insert(0, [InlineKeyboardButton(text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–ø–æ—Ä—Ç", url=f"https://t.me/CS2Observers/{msg_id}")])
            reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer(
                f"‚ö†Ô∏è –ù–∞ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–µ–ø–æ—Ä—Ç. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ?",
                reply_markup=reply_markup
            )
            await state.update_data(profile_link=profile_link, steam_id=steam_id, duplicate=True)
            return

    await state.update_data(profile_link=profile_link, steam_id=steam_id)
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è:", reply_markup=reason_keyboard)
    await state.set_state(ReportForm.reason)

async def send_video_to_channel(video_path, profile_link, reason, comment, uuid_str, message):
    caption = f"<b>üö® –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç</b>\n\n"
    caption += f"<b>üîó –ü—Ä–æ—Ñ–∏–ª—å:</b> {profile_link}\n"
    caption += f"<b>üéØ –ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
    caption += f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment or '‚Äî'}\n"
    caption += f"<b>üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
    caption += f"<b>üìÑ UUID:</b> {uuid_str}"

    video = FSInputFile(video_path)
    msg = await bot.send_video(
        chat_id=CHANNEL_ID,
        video=video,
        caption=caption,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –í–∏–Ω–æ–≤–µ–Ω", callback_data=f"vote:{uuid_str}:guilty"),
                    InlineKeyboardButton(text="‚ùå –ù–µ –≤–∏–Ω–æ–≤–µ–Ω", callback_data=f"vote:{uuid_str}:not_guilty")
                ]
            ]
        )
    )

    await bot.send_message(
        OWNER_ID,
        f"üì© –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –æ—Ç @{message.from_user.username or message.from_user.full_name}:\n{profile_link}",
    )

    return msg.message_id

# –ü—Ä–æ–≤–µ—Ä–∫–∞ VAC-—Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–ø–æ—Ä—Ç–∞
async def check_vac_before_report(steam_profile_url: str):
    steam_id = steam_profile_url.split('/')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º Steam ID –∏–∑ URL
    vac_banned = check_vac_ban(steam_id)
    
    if vac_banned:
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∏–º–µ–µ—Ç VAC-–±–∞–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        return "–ò–≥—Ä–æ–∫ –∏–º–µ–µ—Ç VAC-–±–∞–Ω!"
    else:
        return "–ò–≥—Ä–æ–∫ –Ω–µ –∏–º–µ–µ—Ç VAC-–±–∞–Ω."



@dp.callback_query(F.data.in_(["Aim", "WallHack", "Aim+WH", "Other"]))
async def process_reason(callback_query, state: FSMContext):
    await state.update_data(reason=callback_query.data)
    await callback_query.message.answer("‚úçÔ∏è –î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(ReportForm.comment)

@form_router.message(ReportForm.comment)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await message.answer("üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ (–¥–æ 50 –ú–ë, —Ñ–æ—Ä–º–∞—Ç mp4):")
    await state.set_state(ReportForm.video)

@form_router.message(ReportForm.video)
async def process_video(message: Message, state: FSMContext):
    if (
        not message.video or 
        message.video.file_size > 50 * 1024 * 1024 or 
        message.video.mime_type not in ["video/mp4", "video/x-m4v"]
    ):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .mp4 –¥–æ 50 –ú–ë.")
        return

    data = await state.get_data()
    report_id = str(uuid.uuid4())

    report = {
        "id": report_id,
        "profile_link": data['profile_link'],
        "reason": data['reason'],
        "comment": data['comment'],
        "video_id": message.video.file_id,
        "video_path": None,
        "user_id": message.from_user.id,
        "timestamp": datetime.now(timezone.utc).timestamp(),
        "status": "pending"
    }

    save_report(report)

    # –ó–¥–µ—Å—å –º—ã –∂–µ—Å—Ç–∫–æ –∑–∞–º–µ–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –Ω–∞ "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ"
    nickname = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ"  # –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    profile_link = data["profile_link"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    channel_message = f"–†–µ–ø–æ—Ä—Ç –Ω–∞ –∏–≥—Ä–æ–∫–∞: [{nickname}]({profile_link})\n–ü—Ä–∏—á–∏–Ω–∞: {data['reason']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    chat_id = '@CS2Observers'  # –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π chat_id
    bot = Bot(token=os.getenv("BOT_TOKEN"))
    await bot.send_message(chat_id=chat_id, text=channel_message, parse_mode="Markdown")

    await message.answer("‚úÖ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await send_moderation_request(report, message.from_user.username)
    await state.clear()


async def send_moderation_request(report, username=None):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[ 
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{report['id']}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{report['id']}")
        ]]
    )

    caption = (
        f"üÜï *–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç* –æ—Ç @{username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}\n\n"
        f"*üë§ –ü—Ä–æ—Ñ–∏–ª—å:* [—Å—Å—ã–ª–∫–∞]({report['profile_link']})\n"
        f"*üö© –ü—Ä–∏—á–∏–Ω–∞:* {report['reason']}\n"
        f"*üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {report['comment'] or '‚Äî'}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ video_id
    video_id = report.get("video_id")
    if not video_id:
        await bot.send_message(OWNER_ID, "‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–ø–æ—Ä—Ç–µ.")
        return

    message = await bot.send_video(
        chat_id=OWNER_ID,
        video=video_id,
        caption=caption,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    vote_counts[message.message_id] = {
        "yes": 0,
        "no": 0,
        "report_id": report['id'],
        "profile_link": report["profile_link"],
        "user_votes": {}  # user_id -> "yes" / "no"
    }

@router.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_report(callback_query: CallbackQuery):
    report_id = callback_query.data.split("_")[1]

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    with open(REPORTS_FILE, "r", encoding="utf-8") as f:
        reports = json.load(f)

    report = next((r for r in reports if r.get("id") == report_id), None)
    if not report:
        await callback_query.message.answer("‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ "approved"
    report["status"] = "approved"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ—Ä—Ç–∞—Ö
    with open(REPORTS_FILE, "w", encoding="utf-8") as f:
        json.dump(reports, f, indent=2, ensure_ascii=False)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞
    await bot.send_message(
        report["user_id"],
        f"‚úÖ –†–µ–ø–æ—Ä—Ç –Ω–∞ {report['profile_link']} –ø—Ä–∏–Ω—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π!"
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
    caption = (
        f"üë§ [–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ]({report['profile_link']})\n"
        f"üïµÔ∏è –ü—Ä–∏—á–∏–Ω–∞: *{report['reason']}*\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['comment'] or '‚Äì'}\n"
        f"üìÖ –í—Ä–µ–º—è: {datetime.fromtimestamp(report['timestamp']).strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–ì–æ–ª–æ—Å—É–π—Ç–µ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [
            InlineKeyboardButton(text=f"–í–∏–Ω–æ–≤–µ–Ω ({vote_counts.get(report['channel_msg_id'], {}).get('yes', 0)})", callback_data=f"vote_yes_{report_id}"),
            InlineKeyboardButton(text=f"–ù–µ –≤–∏–Ω–æ–≤–µ–Ω ({vote_counts.get(report['channel_msg_id'], {}).get('no', 0)})", callback_data=f"vote_no_{report_id}")
        ],
        [
            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", url=report["profile_link"])
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –≤ –∫–∞–Ω–∞–ª
    video_id = report.get("video_id")
    if not video_id:
        await callback_query.message.answer("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç —Å –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª
    message = await bot.send_video(
        chat_id=CHANNEL_ID,
        video=video_id,
        caption=caption,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    report["channel_msg_id"] = message.message_id
    with open(REPORTS_FILE, "w", encoding="utf-8") as f:
        json.dump(reports, f, indent=2, ensure_ascii=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    vote_counts[message.message_id] = {
        "yes": 0,
        "no": 0,
        "report_id": report_id,
        "profile_link": report["profile_link"],
        "user_votes": {}
    }

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞
    await callback_query.message.answer("‚úÖ –†–µ–ø–æ—Ä—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.")




@dp.callback_query(F.data.startswith("reject_"))
async def reject_report(callback_query: types.CallbackQuery):
    await callback_query.answer("–†–µ–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

    report_id = callback_query.data.split("_")[1]
    reports = load_reports()
    report = next((r for r in reports if r["id"] == report_id), None)

    if not report:
        await callback_query.message.answer("‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback_query.message.answer(
        f"üö´ –†–µ–ø–æ—Ä—Ç –Ω–∞ <a href=\"{report['profile_link']}\">{report['profile_link']}</a> –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.",
        parse_mode="HTML"
    )

@form_router.callback_query(F.data.startswith(("vote_yes_", "vote_no_")))
async def handle_vote(callback_query: types.CallbackQuery):
    if not callback_query.message:
        await callback_query.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    message_id = callback_query.message.message_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º message_id
    user_id = callback_query.from_user.id
    callback_data = callback_query.data

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–æ–ª–æ—Å–∞
    if callback_data.startswith("vote_yes_"):
        vote_type = "yes"
    elif callback_data.startswith("vote_no_"):
        vote_type = "no"
    else:
        await callback_query.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    if message_id not in vote_counts:
        await callback_query.answer("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    vote_data = vote_counts[message_id]
    previous_vote = vote_data["user_votes"].get(user_id)

    # –ï—Å–ª–∏ –≥–æ–ª–æ—Å —Ç–æ—Ç –∂–µ ‚Äî –Ω–µ –¥–∞—ë–º –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if previous_vote == vote_type:
        await callback_query.answer("‚õî –¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª —Ç–∞–∫.", show_alert=True)
        return

    # –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç –≥–æ–ª–æ—Å ‚Äî —É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    if previous_vote:
        vote_data[previous_vote] -= 1

    vote_data[vote_type] += 1
    vote_data["user_votes"][user_id] = vote_type

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    yes = vote_data["yes"]
    no = vote_data["no"]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[ 
            InlineKeyboardButton(
                text=f"üëç –í–∏–Ω–æ–≤–µ–Ω ({yes})",
                callback_data=f"vote_yes_{vote_data['report_id']}"
            ),
            InlineKeyboardButton(
                text=f"üëé –ù–µ –≤–∏–Ω–æ–≤–µ–Ω ({no})",
                callback_data=f"vote_no_{vote_data['report_id']}"
            )
        ], [
            InlineKeyboardButton(
                text="üîó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                url=vote_data["profile_link"]
            )
        ]]
    )

    try:
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        await callback_query.answer("‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω.")
    except Exception as e:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.", show_alert=True)
        print(f"[handle_vote] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (message_id={message_id}, user_id={user_id}, data={callback_data}): {e}")



@dp.message(Command("pending_reports"))
async def pending_reports(message: Message):
    if not await is_admin(message): return
    reports = load_reports()
    count = sum(1 for r in reports if r["status"] == "pending")
    await message.answer(f"üìã –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å: {count} —Ä–µ–ø–æ—Ä—Ç(–æ–≤)")

    
@dp.callback_query(lambda c: c.data and c.data.startswith("reject:"))
async def handle_reject(callback: types.CallbackQuery):
    profile_link = callback.data.split(":", 1)[1]
    await callback.message.edit_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ {profile_link} <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.",
        parse_mode=ParseMode.HTML
    )
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
CHANNEL_ID = -1002559015377  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

async def publish_to_channel(report):
    await bot.send_message(
        CHANNEL_ID,
        f"‚ö†Ô∏è –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:\n\n"
        f"üîó <a href='{report['profile_link']}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n"
        f"üö® –ü—Ä–∏—á–∏–Ω–∞: {report['reason']}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['comment'] or '‚Äî'}\n"
        f"‚è∞ –í—Ä–µ–º—è: {report['created_at']}",
        parse_mode="HTML"
    )
    await bot.send_video(CHANNEL_ID, video=report["video_id"])
  

if __name__ == "__main__":
    import asyncio

    async def main():
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot = Bot(token=BOT_TOKEN)  # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        await dp.start_polling(bot)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")

    asyncio.run(main())
